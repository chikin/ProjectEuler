package com.twhitlock.project.euler.solutions

/**
 * Created by twhitlock on 3/8/14.
 * The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

 Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
 10: 1,2,5,10
 15: 1,3,5,15
 21: 1,3,7,21
 28: 1,2,4,7,14,28
 We can see that 28 is the first triangle number to have over five divisors.

 What is the value of the first triangle number to have over five hundred divisors?
 */

def factors(double number) {
    def factors = []
    def limit = Math.floor(Math.sqrt(number))
    def counter = 1
    while(counter < limit) {
        if(number % counter == 0) {
            factors.add(counter)
          factors.add(number / counter)
        }
        counter = counter + 1
    }
    return factors
}

def countFactors(double number) {
    return factors(number).size()
}

def triangularNumber(double n) {
   def number = 0
   for(int i = 0; i < n; i++) {
       number = number + i
   }
    return number
}

def number = 1
def numberOfFactorsOfTriangularNumber = 1
while(numberOfFactorsOfTriangularNumber < 500) {
    number = number + 1
    def triangularNumber = triangularNumber(number)
    println "triangular number ${triangularNumber}"
    numberOfFactorsOfTriangularNumber = countFactors(triangularNumber)
    println "number of factors: ${numberOfFactorsOfTriangularNumber}"
}
println number
//println "triangular ${triangularNumber(12375)}"
//println "Number of factors ${12375}"
println triangularNumber(7)
println countFactors(28)